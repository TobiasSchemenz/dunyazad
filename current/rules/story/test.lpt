% vim: syn=gringo
% setup:
% ------

story_node(root).
node_status_reached(root, uninitialized).
path_length(root, 0).
node_type(root, choice).

story_op(root, initialize_node).
story_op(root, build_options).
story_op(root, add_branch_nodes).

:- not successor(root, option(1), root_1).
story_op(root_1, initialize_node).
story_op(root_1, build_options).
story_op(root_1, add_branch_nodes).

:- not successor(root, option(2), root_2).
story_op(root_2, initialize_node).
story_op(root_2, build_options).

:- not successor(root_1, option(1), root_1_1).
story_op(root_1_1, initialize_node).
story_op(root_1_1, build_options).

%:- not setup(root, being_robbed).
%:- not setup("root_1", roc_attack).
:- not resolves_vignette(root, option(1)).
%:- 0 = { resolves_vignette(N, option(O)) : at(N, option(O)) }.

st(root, inst(actor, the_party)).
st(root, property(name, inst(actor, the_party), "party")).
st(root, property(number, inst(actor, the_party), plural)).
st(root, property(gender, inst(actor, the_party), neuter)).

st(root, inst(item, supplies)).
st(root, property(name, inst(item, supplies), "supplies")).
st(root, property(number, inst(item, supplies), plural)).
st(root, property(gender, inst(item, supplies), neuter)).
st(root, relation(has_item, inst(actor, the_party), inst(item, supplies))).

st(root, inst(party_member, "Arel")).
st(root, property(name, inst(party_member, "Arel"), "Arel")).
st(root, property(number, inst(party_member, "Arel"), singular)).
st(root, property(gender, inst(party_member, "Arel"), feminine)).
st(root, inst(party_member, "Jain")).
st(root, property(name, inst(party_member, "Jain"), "Jain")).
st(root, property(number, inst(party_member, "Jain"), singular)).
st(root, property(gender, inst(party_member, "Jain"), masculine)).

st(root, property(travel_mode, inst(actor, the_party), walking)).
st(root, property(environment, inst(actor, the_party), hills)).
