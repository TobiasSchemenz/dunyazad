% vim: syn=gringo

max_unique(0).
story_root(root).
story_node(root).
node_status_reached(root, uninitialized).
path_length(root, 0).
node_type(root, choice).

story_op(root, initialize_node).
story_op(root, build_options).
story_op(root, add_branch_nodes).
story_op(root, add_surface).

%#minimize { 1@0, bad(Message) : bad(Message) }.

:- bad(M).

bad(1) :- not setup(root, monster_attack).
bad(2) :- not at(root, action(option(1), polymorph)).
bad(3) :- not at(root, outcome(option(1), o(success, cursed))).
bad(4) :- not at(root, action(option(2), pacify)).
bad(5) :- not at(root, outcome(option(2), o(mood, relaxed))).
bad(6) :- not at(root, action(option(3), flee)).
bad(7) :- not at(root, outcome(option(3), o(success, escape))).

%bad(m(X, option_feel)) :-
%  story_op(N, build_options),
%  at(N, option(X)),
%  0 = {
%    at(N, option_feel(option(X), sure_thing));
%    at(N, option_feel(option(X), safe));
%    at(N, option_feel(option(X), hopeful))
%  }.
%
%bad(m(X, predictability)) :-
%  story_op(N, build_options),
%  at(N, option(X)),
%  1 != {
%    at(N, overall_predictability(option(X), predictable));
%    at(N, overall_predictability(option(X), expected))
%  }.
%
%bad(m(X, outcome)) :-
%  story_op(N, build_options),
%  at(N, option(X)),
%  0 = {
%    at(N, outcome_overall(option(X), great));
%    at(N, outcome_overall(option(X), good))
%  }.
